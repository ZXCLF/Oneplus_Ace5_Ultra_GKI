name: Oneplus_Ace5_Ultra_GKI

on:
  workflow_dispatch:
    inputs:
      KERNEL_SUFFIX:
        description: 'ÂÜÖÊ†∏ÂêçÁß∞(ÊîØÊåÅ‰∏≠Êñá‰∏éemoji)'
        required: true
        default: '-android15-8-g29d86c5fc9dd-abogki428889875-4k'
      KERNEL_TIME:
        description: "ÂÜÖÊ†∏ÊûÑÂª∫Êó•ÊúüÊõ¥Êîπ(ÈªòËÆ§‰∏∫ÂéüÂéÇ)"
        required: true
        default: 'Tue Jul  1 19:48:18 UTC 2025'
      KSU_TYPE:
        description: "ÈÄâÊã©RootÁÆ°ÁêÜÂô®"
        required: true
        type: choice
        options:
          - KernelSU Next
          - SukiSU Ultra
        default: 'KernelSU Next'
      enable_feature_x:
        description: "ÊòØÂê¶ÂêØÁî®KPM (‰ªÖSukiSU UltraÂèØÁî®)"
        required: true
        default: false
        type: boolean
      enable_feature_y:
        description: "ÊòØÂê¶ÂêØÁî®lz4kd"
        required: true
        default: true
        type: boolean
      enable_bbg:
        description: "Baseband-guardÈò≤Ê†ºÊú∫"
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache  
      CCACHE_MAXSIZE: 8G
    steps:
      - name: "üöÄ ÊúÄÂ§ßÂåñÊûÑÂª∫Á©∫Èó¥"
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: "üîê ÈÖçÁΩÆGit"
        run: |
          git config --global user.name "GKI_Build"
          git config --global user.email "NO@Thanks.com"

      - name: "üì¶ ÂÆâË£ÖÊûÑÂª∫‰æùËµñ"
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl libelf-dev build-essential flex bison libssl-dev libncurses-dev liblz4-tool zlib1g-dev libxml2-utils rsync unzip
          sudo apt install -y python3 git curl ccache

      - name: "‚öôÔ∏è ÂàùÂßãÂåñccache"
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: "üì• ÂÆâË£ÖRepoÂ∑•ÂÖ∑"
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: "‚¨áÔ∏è ÂàùÂßãÂåñÂπ∂ÂêåÊ≠•‰ªìÂ∫ì"
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/ZXCLF/Oneplus_Ace5_Ultra_GKI.git -b main -m Oneplus_Ace5_Ultra.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: "‚ö° ÈÖçÁΩÆ Baseband-guard"
        if: ${{ inputs.enable_bbg }}
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common
          curl -sSL https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh -o setup.sh
          bash setup.sh

      # ========== KernelSU Next ÂàÜÊîØ ==========
      - name: "‚ö° ÈÖçÁΩÆ KernelSU Next"
        if: ${{ inputs.KSU_TYPE == 'KernelSU Next' }}
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          cd KernelSU-Next
          KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/KernelSU-Next/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)

          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "‚úÖ KernelSU Next ÈÖçÁΩÆÂÆåÊàê"

      - name: "‚ö° ÈÖçÁΩÆSUSFS (KernelSU Next)"
        if: ${{ inputs.KSU_TYPE == 'KernelSU Next' }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/WildKernels/kernel_patches.git
          git clone https://github.com/ShirkNeko/SukiSU_patch.git

          cd kernel_platform        
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          # lz4k
          if [ "${{ inputs.enable_feature_y }}" = "true" ]; then
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi
          
          # Apply patches
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          
          # Â∫îÁî®ÈöêËóèË°•‰∏Å
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 --fuzz=3 < scope_min_manual_hooks_v1.4.patch
          
          echo "‚úÖ SUSFSÈÖçÁΩÆÂÆåÊàê"

      # ========== SukiSU Ultra ÂàÜÊîØ ==========
      - name: "‚ö° ÈÖçÁΩÆSukiSU Ultra"
        if: ${{ inputs.KSU_TYPE == 'SukiSU Ultra' }}
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          
          # È™åËØÅMakefileÂ≠òÂú®
          if [ ! -f "kernel/Makefile" ]; then
            echo "‚ùå ÈîôËØØÔºöÁº∫Â∞ëkernel/Makefile"
            ls -la
            exit 1
          fi
          
          # ËÆæÁΩÆSukiSUÁâàÊú¨
          
          echo "‚úÖ SukiSU UltraÈÖçÁΩÆÂÆåÊàê"

      - name: "‚ö° ÂÆâË£Ösusfs (SukiSU Ultra)"
        if: ${{ inputs.KSU_TYPE == 'SukiSU Ultra' }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

          cd kernel_platform        
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          # lz4k
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          
          # Apply patches
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          echo "‚úÖ SUSFSÈÖçÁΩÆÂÆåÊàê"

      # ========== ÂÖ¨ÂÖ±Ê≠•È™§ ==========
      - name: "üì¶ Â∫îÁî® HMBird GKI Ë°•‰∏Å"
        run: |
          cd kernel_workspace/kernel_platform/common/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>

          static int __init hmbird_patch_init(void)
          {
              struct device_node *ver_np;
              const char *type;
              int ret;

              ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
              if (!ver_np) {
                    pr_info("hmbird_patch: version_type node not found\n");
                    return 0;
              }

              ret = of_property_read_string(ver_np, "type", &type);
              if (ret) {
                    pr_info("hmbird_patch: type property not found\n");
                    of_node_put(ver_np);
                    return 0;
              }

              if (strcmp(type, "HMBIRD_OGKI")) {
                    of_node_put(ver_np);
                    return 0;
              }

              struct property *prop = of_find_property(ver_np, "type", NULL);
              if (prop) {
                    struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                    if (!new_prop) {
                        pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                        of_node_put(ver_np);
                        return 0;
              }
              memcpy(new_prop, prop, sizeof(*prop));
              new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
              if (!new_prop->value) {
                    pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                    kfree(new_prop);
                    of_node_put(ver_np);
                    return 0;
              }
              strcpy(new_prop->value, "HMBIRD_GKI");
              new_prop->length = strlen("HMBIRD_GKI") + 1;

              if (of_remove_property(ver_np, prop) != 0) {
                  pr_info("hmbird_patch: of_remove_property failed\n");
                  return 0;
              }
              if (of_add_property(ver_np, new_prop) !=0) {
                  pr_info("hmbird_patch: of_add_property failed\n");
                  return 0;
              }
              pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
          }
          else {
              pr_info("hmbird_patch: type property structure not found\n");
          }
          of_node_put(ver_np);
          return 0;
          }
          early_initcall(hmbird_patch_init);
          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("reigadegr");
          MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
          EOF
          if ! grep -q "hmbird_patch.o" Makefile; then
          echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          cd ../../../
          git add -A

      - name: "üì¶ Â∫îÁî® lz4kd Ë°•‰∏Å"
        if: ${{ inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true
          
          # ‰ªÖSukiSU UltraÂ∫îÁî®È¢ùÂ§ñÁöÑË°•‰∏Å
          if [ "${{ inputs.KSU_TYPE }}" = "SukiSU Ultra" ]; then
            cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4k_oplus.patch ./
            patch -p1 -F 3 < lz4k_oplus.patch || true
          fi

      - name: "üì¶ ÈÖçÁΩÆÂÜÖÊ†∏ÈÄâÈ°π"
        run: |
          cd kernel_workspace/kernel_platform
          
          # ÂÖ¨ÂÖ±KSUÈÖçÁΩÆ
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # KernelSU Next ÁâπÂÆöÈÖçÁΩÆ
          if [ "${{ inputs.KSU_TYPE }}" = "KernelSU Next" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # SukiSU Ultra ÁâπÂÆöÈÖçÁΩÆ
          if [ "${{ inputs.KSU_TYPE }}" = "SukiSU Ultra" ]; then
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
            
          # SUSFS ÈÖçÁΩÆ
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig

          # Baseband-guard ÈÖçÁΩÆ
          if [ "${{ inputs.enable_bbg }}" = "true" ]; then
            echo "‚ö° ÂêØÁî®BBGÈò≤Ê†ºÊú∫..."
            echo 'CONFIG_BBG=y' >> ./common/arch/arm64/configs/gki_defconfig
            echo 'CONFIG_LSM="landlock,lockdown,yama,loadpin,safesetid,selinux,smack,tomoyo,apparmor,bpf,baseband_guard"' >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # lz4kd ÈÖçÁΩÆ
          if [ "${{ inputs.enable_feature_y }}" = "true" ]; then
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # KPMÈÖçÁΩÆ (‰ªÖSukiSU Ultra)
          if [ "${{ inputs.KSU_TYPE }}" = "SukiSU Ultra" ] && [ "${{ inputs.enable_feature_x }}" = "true" ]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # ÂÖ∂‰ªñÈÖçÁΩÆ
          echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LOCALVERSION_AUTO=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig

          # ÁßªÈô§ check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel with ${{ inputs.KSU_TYPE }}"

      - name: "üìù Â∫îÁî®ÊûÑÂª∫ÂêçÁß∞"
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          sudo sed -i 's/-4k/${{ github.event.inputs.KERNEL_SUFFIX }}/g' ./common/arch/arm64/configs/gki_defconfig



      - name: "üî® ÁºñËØëÂÜÖÊ†∏"
        run: |
          export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.KERNEL_TIME }}"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          sudo apt install libelf-dev
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig all

      - name: "üî® Â∫îÁî®LinuxË°•‰∏Å (‰ªÖSukiSU Ultra)"
        if: ${{ inputs.KSU_TYPE == 'SukiSU Ultra' }}
        run: |
          cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
         
      - name: "üì¶ ÊâìÂåÖÂÜÖÊ†∏"
        run: |
          git clone https://github.com/ZXCLF/AnyKernel3.git --depth=1   
          rm -rf ./AnyKernel3/.git
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: "üì§ ‰∏ä‰º† AnyKernel3"
        uses: actions/upload-artifact@v4
        with:
          name: |
            ${{ inputs.KSU_TYPE == 'KernelSU Next' && 'KernelSU_Next' || 'SukiSU' }}_${{ env.KSUVER }}_oneplus_ace5_Ultra
          path: ./AnyKernel3/*
